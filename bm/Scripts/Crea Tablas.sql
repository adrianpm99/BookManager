CREATE TABLE IF NOT EXISTS  book (   

    bookId SERIAL PRIMARY KEY,   

    bookTitle VARCHAR(50) NOT NULL,   

    bookDescription VARCHAR(200),   

    bookAuthor VARCHAR(50) NOT NULL,   

    bookPageNumber INT,   

    bookISBN VARCHAR(13) NOT NULL,   

    bookEditorial VARCHAR(50),   

    bookEdition INT,   

    bookPublicationYear INT    

);  
ALTER SEQUENCE public.book_bookid_seq RESTART 9;


CREATE TABLE IF NOT EXISTS copy (  

    copyId SERIAL PRIMARY KEY,   

    bookId INT NOT NULL REFERENCES book(bookId),   

    CopyNotes VARCHAR(50) NOT NULL, 

    CopyCode INT  

);  
ALTER SEQUENCE public.copy_copyid_seq RESTART 19; 


CREATE TABLE IF NOT EXISTS customer (  

    customerId SERIAL PRIMARY KEY,  

    customerName VARCHAR (50) NOT NULL,  

    customerSurname VARCHAR (50) NOT NULL, 

    customerDni VARCHAR (9) NOT NULL, 

    customerAddress VARCHAR (200), 

    customerTlf VARCHAR (9) NOT NULL, 

    customerEmail VARCHAR (100) 

); 
ALTER SEQUENCE public.customer_customerid_seq RESTART 10; 


CREATE TABLE IF NOT EXISTS reservation (   

    reservationId SERIAL PRIMARY KEY ,   

    bookId INT NOT NULL REFERENCES  book(bookId),   

    customerId INT NOT NULL REFERENCES  customer(customerId), 

    copyId INT REFERENCES copy(copyId), 

    reservationDeadLine DATE 

);  
ALTER SEQUENCE public.reservation_reservationid_seq RESTART 2; 


CREATE TABLE IF NOT EXISTS lending (    

    lendingId SERIAL PRIMARY KEY,   

    customerId INT NOT NULL REFERENCES customer(customerId), 

    lendingDate DATE NOT NULL,   

    lendingDeadLine DATE NOT NULL,   

    lendingReturnDate DATE,   

    lendingNotes VARCHAR (200)   

);
ALTER SEQUENCE public.lending_lendingid_seq RESTART 8;


CREATE TABLE IF NOT EXISTS copyLending(   

    copyLendingId SERIAL PRIMARY KEY ,   

    copyId INT NOT NULL REFERENCES copy(copyId),   

    lendingId INT NOT NULL REFERENCES lending(lendingId)   

);
ALTER SEQUENCE public.copylending_copylendingid_seq RESTART 11;


CREATE TABLE IF NOT EXISTS shelving(   

   shelvingId SERIAL PRIMARY KEY ,   

   shelvingPublicName VARCHAR(50) NOT NULL   

);   
ALTER SEQUENCE public.shelving_shelvingid_seq RESTART 3; 


CREATE TABLE IF NOT EXISTS copyShelving(   

   copyShelvingId SERIAL PRIMARY KEY ,   

   shelvingId INT NOT NULL REFERENCES shelving(shelvingId),   

   copyId INT NOT NULL REFERENCES copy(copyId)  

);
ALTER SEQUENCE public.copyshelving_copyshelvingid_seq RESTART 19; 


CREATE TABLE IF NOT EXISTS TUSER ( 

    USER_ VARCHAR(50) NOT NULL PRIMARY KEY, 

    PASSWORD VARCHAR(50), 

    NAME VARCHAR(50), 

    SURNAME VARCHAR(50), 

    EMAIL VARCHAR(50), 

    NIF VARCHAR(50), 

    USERBLOCKED TIMESTAMP, 

    LASTPASSWORDUPDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 

    FIRSTLOGIN BOOLEAN DEFAULT TRUE 

); 

CREATE TABLE IF NOT EXISTS TROLE ( 

    ID_ROLENAME INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY, 

    ROLENAME VARCHAR(255), 

    XMLCLIENTPERMISSION VARCHAR 

); 
ALTER TABLE TROLE ALTER COLUMN ID_ROLENAME RESTART WITH 1; 

 
CREATE TABLE  IF NOT EXISTS TUSER_ROLE ( 

    ID_USER_ROLE INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY, 

    ID_ROLENAME INTEGER, 

    USER_ VARCHAR(50), 

    CONSTRAINT FK_TUSER FOREIGN KEY(USER_) REFERENCES TUSER(USER_),CONSTRAINT FK_TROLE FOREIGN KEY(ID_ROLENAME) REFERENCES TROLE(ID_ROLENAME) 

); 
ALTER TABLE TUSER_ROLE ALTER COLUMN ID_USER_ROLE RESTART WITH 1; 

 

CREATE TABLE IF NOT EXISTS TSERVER_PERMISSION( 

    ID_SERVER_PERMISSION INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY, 

    PERMISSION_NAME VARCHAR(10485760) 

); 

 

CREATE TABLE IF NOT EXISTS TROLE_SERVER_PERMISSION ( 

    ID_ROLE_SERVER_PERMISSION INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY, 

    ID_ROLENAME INTEGER,ID_SERVER_PERMISSION INTEGER, 

    CONSTRAINT FK_TROLE_SERVER_PERMISSION FOREIGN KEY(ID_ROLENAME) REFERENCES TROLE(ID_ROLENAME),CONSTRAINT FK_TSERVER_PERMISSION FOREIGN KEY(ID_SERVER_PERMISSION) REFERENCES TSERVER_PERMISSION(ID_SERVER_PERMISSION) 

);